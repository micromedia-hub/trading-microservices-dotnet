// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingMicroservices.Services.OrderService.Data;

#nullable disable

namespace TradingMicroservices.Services.OrderService.Data.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20251001211859_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("order")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Services.OrderService.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.Property<string>("UserRef")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserRef");

                    b.ToTable("orders", "order");
                });

            modelBuilder.Entity("Services.OrderService.Data.Entities.OrderExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FillPrice")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("FilledQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("executions", "order");
                });

            modelBuilder.Entity("Services.OrderService.Data.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("stocks", "order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apple Inc.",
                            Symbol = "AAPL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tesla, Inc.",
                            Symbol = "TSLA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NVIDIA Corporation",
                            Symbol = "NVDA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Microsoft Corporation",
                            Symbol = "MSFT"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Amazon.com, Inc.",
                            Symbol = "AMZN"
                        });
                });

            modelBuilder.Entity("Services.OrderService.Data.Entities.Order", b =>
                {
                    b.HasOne("Services.OrderService.Data.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Services.OrderService.Data.Entities.OrderExecution", b =>
                {
                    b.HasOne("Services.OrderService.Data.Entities.Order", "Order")
                        .WithOne("Execution")
                        .HasForeignKey("Services.OrderService.Data.Entities.OrderExecution", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Services.OrderService.Data.Entities.Order", b =>
                {
                    b.Navigation("Execution");
                });
#pragma warning restore 612, 618
        }
    }
}
